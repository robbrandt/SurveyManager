<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Question type base class.
 */
abstract class SurveyManager_AbstractQuestionType extends Zikula_AbstractBase
{
    /**
     * Returns the question type code.
     */
    public function getID()
    {
        throw new Exception($this->__('Error: getID() has not been implemented.'));
    }

    /**
     * Returns the question type name.
     */
    public function getName()
    {
        throw new Exception($this->__('Error: getName() has not been implemented.'));
    }

    /**
     * Returns the question type category.
     */
    public function getGroup()
    {
        throw new Exception($this->__('Error: getGroup() has not been implemented.'));
    }

    /**
     * Returns output for preview pages.
     */
    public function getPreviewOutput($value)
    {
        $value = stripslashes($value);
        return $value;
    }

    /**
     * Returns label or description for editing.
     */
    public function getEditIntro($question, $withDescription = false, $context = '')
    {
        $requiredSign = $question['required'] ? '*&nbsp;' : '';
        $output = '<label for="responses_' . $question['id'] . '">' . $requiredSign . $question['name'] . '</label><br />';
        if ($withDescription === true && $question['description'] != '') {
            $output .= $this->linebreaks($question['description']);
        }
        return $output;
    }

    /**
     * Returns the editing ui component(s).
     */
    public function getEditInput($question, $response, $context = '')
    {
        // $context may be admin_response_edit, user_survey_display, block_survey_display
        return '';
    }

    /**
     * Returns the editing ui component for a field which may be entered automatically.
     * This method is adapted by several subclasses, for example user, teacher, topic, etc.
     */
    protected function getEditInputDefault($question, $response, $context = '')
    {
        // $context may be admin_response_edit, user_survey_display, block_survey_display
        $questionId = $question['id'];
        $cssClass = $question['required'] ? 'required' : 'standard';
        // HACK
        if ($context == 'admin_response_edit') {
            $cssClass = 'standard';
        }
        $output = '<input class="' . $cssClass . '" type="text" id="responses_' . $questionId . '" name="responses[' . $questionId . ']" size="' . $this->getTextInputSize($context) . '" value="' . /*DataUtil::formatForDisplay(*/$response/*)*/ . "\" />\n";
        if ($question['required']) {
            $output .= '<p id="advice-required-responses_' . $questionId . '" class="custom-advice" style="display: none">' . $this->__('Please enter a value for this field.') . "</p>\n";
        }
        if ($context == 'block_survey_display') {
            $output .= '<br />';
        }
        return $output;
    }

    /**
     * Returns a hidden input field containing a given value.
     */
    protected function getHiddenInput($question, $value)
    {
        $questionId = $question['id'];
        return '<input type="hidden" id="responses_' . $questionId . '" name="responses[' . $questionId . ']" value="' . DataUtil::formatForDisplay($value) . '" />' . "\n";
    }

    /**
     * Checks for broken dependencies.
     */
    public function validateDependencies($question, $requiredValue, $inputValue)
    {
        return true;
    }

    /**
     * Checks if a given value is correct.
     */
    public function validateInput($question, $inputValue)
    {
        $result = true;
        if (!$question['required']) {
            return $result;
        }

        $result = !empty($inputValue);
        return $result;
    }

    /**
     * Performs post-editing tasks.
     */
    public function processPostEdit($question, $inputValue, $oldValue, $additionalOptions = array())
    {
        return $inputValue;
    }

    /**
     * Nice formatting.
     */
    public function formatValue($question, $value)
    {
        return $value;
    }

    /**
     * Determines proposed text input field size for the given context.
     */
    protected function getTextInputSize($context = '')
    {
        $size = 30;
        if ($context == 'admin_response_edit') {
            $size = 60;
        } elseif ($context == 'block_survey_display') {
            $size = 20;
        }
        return $size;
    }

    protected function linebreaks($string)
    {
        if (!preg_match("/<br( \\/)?>/", $string) && !preg_match("/<\\/?p>/", $string)) {
            return preg_replace("/(\r\n|\r|\n)/", "<br />", $string);
        }
        return $string;
    }
}
