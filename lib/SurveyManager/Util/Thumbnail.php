<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Utility class for thumbnail related helper methods.
 */
class SurveyManager_Util_Thumbnail extends Zikula_AbstractBase
{
    private $imageTypes = array('.jpg', '.jpeg', '.gif', '.png');

    private $width = 0;
    private $height = 0;

    private $filePath = '';
    private $uploadDirectory = '';
    private $fileExtension = '';
    private $fileExtensionLower = '';

    private $helper = null;

    /**
     * The constructor.
     */
    public function __construct(Zikula_ServiceManager $serviceManager, $filePath, $uploadDirectory = '', $width = 0, $height = 0)
    {
        parent::__construct($serviceManager);

        $this->filePath = $filePath;
        $this->uploadDirectory = $uploadDirectory;
        $this->initFileProperties();

        $this->helper = new SurveyManager_Util_Manual($serviceManager);

        $this->width = intval($width);
        $this->height = intval($height);
        if ($this->width == 0 && $this->height == 0) {
            $this->setThumbDimensions();
        }
    }

    /**
     * Initialises file data.
     */
    private function initFileProperties()
    {
        $this->fileExtension = strrchr($this->filePath, '.');
        $this->fileExtensionLower = strtolower($this->fileExtension);
    }

    /**
     * Deletes the old thumbnail if there is one and generate a new one.
     */
    public function make($thumbType = 'thumb')
    {
        if (!in_array($this->fileExtensionLower, $this->imageTypes)) {
            return;
        }

        $this->setThumbDimensions($thumbType);
        $this->delete($thumbType);

        $uploader = new SurveyManager_Util_Upload($this->serviceManager, $this->uploadDirectory);
        $uploader->constrainPhotoCopy($this->filePath, $this->width, $this->height, '_' . $thumbType);
    }

    /**
     * Deletes a certain thumbnail file if there is one.
     */
    public function delete($thumbType = 'thumb')
    {
        if (!in_array($this->fileExtensionLower, $this->imageTypes)) {
            return;
        }

        $relativeThumbPath = str_replace($this->fileExtension, '_' . $thumbType . $this->fileExtension, $this->filePath);
        $thumbPath = $this->helper->getDocumentRoot() . $relativeThumbPath;
        if (is_file($thumbPath)) {
            unlink($thumbPath);
        }
    }

    /**
     * Sets max width and max height.
     */
    private function setThumbDimensions($thumbType)
    {
        $this->width = $this->getVar('maxThumbWidth');
        $this->height = $this->getVar('maxThumbHeight');
        if ($thumbType == 'display') {
            $this->width = $this->getVar('maxPhotoWidth');
            $this->height = $this->getVar('maxPhotoHeight');
        }
    }
}
