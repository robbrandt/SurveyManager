<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Utility class for general purpose helper methods.
 */
class SurveyManager_Util_Manual extends Zikula_AbstractBase
{
    public function getDocumentRoot()
    {
        $doc_root = $_SERVER['DOCUMENT_ROOT'];
        $last_char = substr($doc_root, strlen($doc_root) - 1, 1);
        if ($last_char != '/') {
            $doc_root .= '/';
        }

        return $doc_root;
    }

    public function getSuffix($string)
    {
        // Find last occurrence of "."
        $dotloc = strrpos($string, '.');

        // The length of the suffix is the length of the string
        // minus the numeric value of the last location of "." in the string
        $suffix_len = strlen($string) - $dotloc;

        // Find the suffix
        $suffix = substr($string, $dotloc, $suffix_len);
        return $suffix;
    }

    // By zspencer at zacharyspencer dot com, from php.net
    public function array_merge_keys()
    {
        $args = func_get_args();
        $result = array();
        foreach ($args as $array) {
            foreach ($array as $key => $value) {
                $result[$key] = $value;
            }
        }
        return $result;
    }

    function findResponseValue($responseId = 0, $questionType = '', $response = null)
    {
        if ($responseId == 0 || !in_array($questionType, array('name_id', 'email_from'))) {
            return false;
        }

        if ($response == null) {
            $response = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'response', 'id' => $responseId));
        }

        if (!$response) {
            return false;
        }

        $questions = array();

        // Look for fitting questions in the survey of which this response is a child
        $where = 'tblSurvey.id = \'' . $response['survey']['id'] . '\'';
        $pages = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'page', 'where' => $where));

        // Are there any?
        if (empty($pages)) {
            return false;
        }

        foreach ($pages as $page) {
            if (empty($page['questions'])) {
                continue;
            }
            foreach ($page['questions'] as $question) {
                if ($question['questionType'] != $questionType) {
                    continue;
                }

                // Find a response to the question
                $where = 'tblResponse.id = \'' . $responseId . '\' AND tblQuestion.id = \'' . $question['id'] . '\'';
                $responseData = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'responseData', 'where' => $where));
                        
                // See if any of the recorded data points actually have values
                foreach ($responseData as $responseDatum) {
                    if (empty($responseDatum['responseValue'])) {
                        continue;
                    }
                    return $responseDatum['responseValue'];
                }
            }
        }
        return false;
    }

    public function getListOfQuestionTypes()
    {
        $classNames = $this->readQuestionTypeClassNames();
        $questionTypes = array();
        foreach ($classNames as $className) {
            $questionType = new $className($this->serviceManager);
            // build structure for easy formdropdownlist creation
            $questionTypes[] = array('value' => $questionType->getID(),
                                     'text' => $questionType->getName(),
                                     'optgroup' => $questionType->getGroup());
        }

        usort($questionTypes, function($a, $b) {
            if ($a['optgroup'] == $b['optgroup']) {
                return $a['text'] > $b['text'];
            }
            return $a['optgroup'] > $b['optgroup'];
        });

        return $questionTypes;
    }

    public function getQuestionTypeHandler($questionTypeValue)
    {
        $classNames = $this->readQuestionTypeClassNames();
        foreach ($classNames as $className) {
            $questionType = new $className($this->serviceManager);
            if ($questionType->getID() != $questionTypeValue) {
                continue;
            }
            return $questionType;
        }
    }

    private function readQuestionTypeClassNames()
    {
        $files = FileUtil::getFiles('modules/SurveyManager/lib/SurveyManager/QuestionType', false, true);
        $classNames = array();
        $classNamePrefix = 'SurveyManager_QuestionType_';
        foreach ($files as $file) {
            $classNames[] = $classNamePrefix . str_replace('.php', '', $file);
        }
        return $classNames;
    }
}
