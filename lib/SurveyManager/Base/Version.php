<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de) at Fri Mar 28 23:17:41 CET 2014.
 */

/**
 * Version information base class.
 */
class SurveyManager_Base_Version extends Zikula_AbstractVersion
{
    /**
     * Retrieves meta data information for this application.
     *
     * @return array List of meta data.
     */
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '2.0.0';
        // the displayed name of the module
        $meta['displayname']          = $this->__('Survey manager');
        // the module description
        $meta['description']          = $this->__('Survey manager module generated by ModuleStudio 0.6.2.');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('surveymanager');
        // core requirement
        $meta['core_min']             = '1.3.5'; // requires minimum 1.3.5
        $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
                          HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)/*,
                          HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
                          'authentication' => array('version' => '1.0'),
                          'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
                          'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
*/
        );

        // permission schema
        $meta['securityschema'] = array(
            'SurveyManager::' => '::',
            'SurveyManager::Ajax' => '::',
            'SurveyManager:ItemListBlock:' => 'Block title::',
            'SurveyManager:Survey:' => 'Survey ID::',
            'SurveyManager:Page:' => 'Page ID::',
            'SurveyManager:Survey:Page' => 'Survey ID:Page ID:',
            'SurveyManager:Question:' => 'Question ID::',
            'SurveyManager:Page:Question' => 'Page ID:Question ID:',
            'SurveyManager:Response:' => 'Response ID::',
            'SurveyManager:Survey:Response' => 'Survey ID:Response ID:',
            'SurveyManager:ResponseData:' => 'ResponseData ID::',
            'SurveyManager:Response:ResponseData' => 'Response ID:ResponseData ID:',
            'SurveyManager:Question:ResponseData' => 'Question ID:ResponseData ID:',
        );
        // DEBUG: permission schema aspect ends


        return $meta;
    }

    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.ui_hooks.surveys', 'ui_hooks', __('surveymanager Surveys Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'surveymanager.ui_hooks.surveys.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'surveymanager.ui_hooks.surveys.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'surveymanager.ui_hooks.surveys.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'surveymanager.ui_hooks.surveys.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'surveymanager.ui_hooks.surveys.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'surveymanager.ui_hooks.surveys.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'surveymanager.ui_hooks.surveys.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.filter_hooks.surveys', 'filter_hooks', __('surveymanager Surveys Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'surveymanager.filter_hooks.surveys.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.ui_hooks.pages', 'ui_hooks', __('surveymanager Pages Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'surveymanager.ui_hooks.pages.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'surveymanager.ui_hooks.pages.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'surveymanager.ui_hooks.pages.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'surveymanager.ui_hooks.pages.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'surveymanager.ui_hooks.pages.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'surveymanager.ui_hooks.pages.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'surveymanager.ui_hooks.pages.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.filter_hooks.pages', 'filter_hooks', __('surveymanager Pages Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'surveymanager.filter_hooks.pages.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.ui_hooks.questions', 'ui_hooks', __('surveymanager Questions Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'surveymanager.ui_hooks.questions.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'surveymanager.ui_hooks.questions.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'surveymanager.ui_hooks.questions.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'surveymanager.ui_hooks.questions.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'surveymanager.ui_hooks.questions.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'surveymanager.ui_hooks.questions.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'surveymanager.ui_hooks.questions.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.filter_hooks.questions', 'filter_hooks', __('surveymanager Questions Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'surveymanager.filter_hooks.questions.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.ui_hooks.responses', 'ui_hooks', __('surveymanager Responses Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'surveymanager.ui_hooks.responses.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'surveymanager.ui_hooks.responses.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'surveymanager.ui_hooks.responses.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'surveymanager.ui_hooks.responses.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'surveymanager.ui_hooks.responses.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'surveymanager.ui_hooks.responses.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'surveymanager.ui_hooks.responses.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.filter_hooks.responses', 'filter_hooks', __('surveymanager Responses Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'surveymanager.filter_hooks.responses.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.ui_hooks.responsedatas', 'ui_hooks', __('surveymanager Response datas Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'surveymanager.ui_hooks.responsedatas.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'surveymanager.ui_hooks.responsedatas.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'surveymanager.ui_hooks.responsedatas.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'surveymanager.ui_hooks.responsedatas.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'surveymanager.ui_hooks.responsedatas.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'surveymanager.ui_hooks.responsedatas.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'surveymanager.ui_hooks.responsedatas.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.surveymanager.filter_hooks.responsedatas', 'filter_hooks', __('surveymanager Response datas Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'surveymanager.filter_hooks.responsedatas.filter');
        $this->registerHookSubscriberBundle($bundle);

        
    }
}
