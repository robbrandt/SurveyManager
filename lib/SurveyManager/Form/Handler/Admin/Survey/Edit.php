<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * This handler class handles the page events of the Form called by the surveyManager_admin_edit() function.
 * It aims on the survey object type.
 */
class SurveyManager_Form_Handler_Admin_Survey_Edit extends SurveyManager_Form_Handler_Admin_Survey_Base_Edit
{
    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
        parent::postInitialize();

        $survey = $this->view->get_template_vars('survey');
        $survey['recipients'] = implode("\r\n", $survey['recipients']);
        $this->view->assign('survey', $survey);
    }

    /**
     * Input data processing called by handleCommand method.
     *
     * @param Zikula_Form_View $view The form view instance.
     * @param array            $args Additional arguments.
     *
     * @return array form data after processing.
     */
    public function fetchInputData(Zikula_Form_View $view, &$args)
    {
        $otherFormData = parent::fetchInputData($view, $args);

        // get treated entity reference from persisted member var
        $entity = $this->entityRef;

        if ($this->mode == 'create') {
            // Find the maximum current weight
            $surveys = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'survey'));

            $maxWeight = -1;
            foreach ($surveys as $survey) {
                $maxWeight = max($survey['weight'], $maxWeight);
            }
            $maxWeight++;
            $entity->setWeight($maxWeight);
        }

        if (empty($entity['responseSubject'])) {
            $entity->setResponseSubject($this->__('Survey Response Received'));
        }
        if (empty($entity['confirmationSubject'])) {
            $entity->setConfirmationSubject('Survey Confirmation Email');
        }

        $recipients = $entity->getRecipients();
        $recipients = str_replace("\r", "\n", $recipients);
        $recipients = str_replace("\n\n", "\n", $recipients);
        $recipients = explode("\n", $recipients);

        foreach ($recipients as $key => $value) {
            if (!empty($value)) {
                continue;
            }
            unset($recipients[$key]);
        }
        $entity->setRecipients($recipients);


        // save updated entity
        $this->entityRef = $entity;
    
        return $otherFormData;
    }
}
