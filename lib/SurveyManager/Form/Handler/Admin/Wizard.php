<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Wizard handler class.
 */
class SurveyManager_Form_Handler_Admin_Wizard extends Zikula_Form_AbstractHandler
{
    private $id;

    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @param Zikula_Form_View $view The form view instance.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize(Zikula_Form_View $view)
    {
        // permission check
        if (!SecurityUtil::checkPermission('SurveyManager:Survey:', '::', ACCESS_ADMIN)) {
            return $view->registerError(LogUtil::registerPermissionError());
        }

        $survey = array();
        $surveyQuestions = array();

        $helper = new SurveyManager_Util_Manual(ServiceUtil::getManager());
        $questionTypes = $helper->getListOfQuestionTypes();

        $this->id = $this->request->query->filter('id', 0, FILTER_VALIDATE_INT);
        if ($this->id) {
            // get survey, but without pages and responses
            $survey = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'survey', 'id' => $this->id, 'useJoins' => false));
            $survey['recipients'] = implode("\r\n", $survey['recipients']);

            // get pages including questions
            $where = 'tblSurvey.id = \'' . $this->id . '\'';
            $surveyPages = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'page', 'where' => $where));

            if (count($surveyPages) > 0) {
                $page = reset($surveyPages);
                foreach ($page['questions'] as $k => $question) {
                    $question['questionValues'] = implode("\r\n", $question['questionValues']);
                    $question['correctValues'] = implode("\r\n", $question['correctValues']);
                    $qid = $question['id'];
                    $surveyQuestions[$qid] = array(
                        'id' => $qid,
                        'name' => $question['name'],
                        'question_' . $qid . '_name' => $question['name'],
                        'question_' . $qid . '_description' => $question['description'],
                        'question_' . $qid . '_questionType' => $question['questionType'],
                        'question_' . $qid . '_questionTypeItems' => $questionTypes,
                        'question_' . $qid . '_questionValues' => $question['questionValues'],
                        'question_' . $qid . '_correctValues' => $question['correctValues'],
                        'question_' . $qid . '_required' => $question['required']
                    );
                }
            }
        } else {
            $survey = new SurveyManager_Entity_Survey();
            $survey->setName('[' . $this->__('New Survey') . ']');
            $survey['recipients'] = implode("\r\n", $survey['recipients']);
        }

        $questiontemplate = array(
            'question_template_questionTypeItems' => $questionTypes
        );

        $this->view->caching = false;
        $this->view->assign('id', $this->id)
                   ->assign('survey', $survey->toArray())
                   ->assign('questions', $surveyQuestions)
                   ->assign('questiontemplate', $questiontemplate);
        foreach ($surveyQuestions as $qid => $question) {
            $this->view->assign('question' . $qid, $question);
        }

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     *
     * @param Zikula_Form_View $view The form view instance.
     * @param array            $args Additional arguments.
     *
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     *
     * @return mixed Redirect or false on errors.
     */
    public function handleCommand(Zikula_Form_View $view, &$args)
    {
        if ($args['commandName'] == 'cancel') {
            // redirect back to the list of surveys
            $url = ModUtil::url($this->name, 'admin', 'view', array('ot' => 'survey'));
            return $this->view->redirect($url);
        }

        // check if all fields are valid
        if (!$this->view->isValid()) {
            return false;
        }

        // retrieve form data
        $formData = $this->view->getValues();

        $surveyData = $formData['survey'];
        $surveyData['recipients'] = str_replace("\r", "\n", $surveyData['recipients']);
        $surveyData['recipients'] = str_replace("\n\n", "\n", $surveyData['recipients']);
        $surveyData['recipients'] = explode("\n", $surveyData['recipients']);

        foreach ($surveyData['recipients'] as $k => $value) {
            if (!empty($value)) {
                continue;
            }
            unset($surveyData['recipients'][$k]);
        }

        $survey = $page = null;
        $newWeight = 0;

        if ($this->id) {
            // Update existing survey
            $survey = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'survey', 'id' => $this->id));
        } else {
            // Create new survey
            $survey = new SurveyManager_Entity_Survey();

            // Find the weight for the new survey
            $allSurveys = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'survey', 'useJoins' => false));
            $maxWeight = 0;
            foreach ($allSurveys as $existingSurvey) {
                $maxWeight = max($existingSurvey['weight'], $maxWeight);
            }
            $newWeight = $maxWeight + 1;
        }

        $survey->setName($surveyData['name']);
        $survey->setThankYou($surveyData['thankYou']);
        if (isset($surveyData['useCaptcha'])) {
            $survey->setUseCaptcha($surveyData['useCaptcha']);
        }
        $survey->setRecipients($surveyData['recipients']);
        $this->entityManager->persist($survey);

        if ($this->id) {
            // Update the main page
            $where = 'tblSurvey.id = \'' . $this->id . '\'';
            $surveyPages = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'page', 'where' => $where));
            if (count($surveyPages) > 0) {
                $page = reset($surveyPages);
            } else {
                // Create new page
                $page = new SurveyManager_Entity_Page();
                $survey->addPages($page);
            }
        } else {
            // Create new page
            $page = new SurveyManager_Entity_Page();
            $survey->addPages($page);
        }

        $page->setName($surveyData['name']);
        $this->entityManager->persist($page);

        unset($formData['survey']);
        unset($surveyData);

        // Now create the question records.

        // Highest qid for an existing question
        $maxQuestionId = $this->request->request->filter('max_qid', 0, FILTER_VALIDATE_INT);

        // List of the order of all questions
        $questionOrder = unserialize($this->request->request->get('question_order'));

        // Any qids which are higher than maxQuestionId need to be created.
        // Any qids that are below or equal to maxQuestionId need to be updated.

        $fieldNames = array('name', 'description', 'questionType', 'required', 'dependencies', 'questionValues', 'correctValues');
        foreach ($questionOrder as $weight => $qid) {
            $questionData = array();
            if (isset($formData['question' . $qid])) {
                $questionData = $formData['question' . $qid];
            } else {
                foreach ($fieldNames as $fieldName) {
                    $questionData[$keyPrefix . $fieldName] = FormUtil::getPassedValue($keyPrefix . $fieldName, null, 'POST');
                }
            }

            $keyPrefix = 'question_' . $qid . '_';
            if (empty($questionData[$keyPrefix . 'name'])) {
                $questionData[$keyPrefix . 'name'] = '[' . $this->__('New Question') . ']';
            }
            if (empty($questionData[$keyPrefix . 'required'])) {
                $questionData[$keyPrefix . 'required'] = false;
            }
            if (empty($questionData[$keyPrefix . 'dependencies'])) {
                $questionData[$keyPrefix . 'dependencies'] = array();
            }

            // remove the key prefix
            foreach ($fieldNames as $fieldName) {
                $questionData[$fieldName] = $questionData[$keyPrefix . $fieldName];
                unset($questionData[$keyPrefix . $fieldName]);
            }

            $questionData['questionValues'] = str_replace("\r", "\n", $questionData['questionValues']);
            $questionData['questionValues'] = str_replace("\n\n", "\n", $questionData['questionValues']);
            $questionData['questionValues'] = explode("\n", $questionData['questionValues']);
        
            foreach ($questionData['questionValues'] as $k => $value) {
                if (!empty($value)) {
                    continue;
                }
                unset($questionData['questionValues'][$k]);
            }

            $questionData['correctValues'] = str_replace("\r", "\n", $questionData['correctValues']);
            $questionData['correctValues'] = str_replace("\n\n", "\n", $questionData['correctValues']);
            $questionData['correctValues'] = explode("\n", $questionData['correctValues']);
        
            foreach ($questionData['correctValues'] as $k => $value) {
                if (!empty($value)) {
                    continue;
                }
                unset($questionData['correctValues'][$k]);
            }

            $question = null;
            if ($qid > $maxQuestionId) {
                // Create a new question if this qid is greater than $maxQuestionId.
                // Note that the qid given to us from the front end is simply a counter that started at $maxQuestionId.
                // It is not the same as the new_qid that will be returned when we insert the record into the DB.
                $question = new SurveyManager_Entity_Question();
                $page->addQuestion($question);
            } else {
                // Update an existing question.
                // In this case, the qid from the front end DOES correspond to the ID of an existing record.
                $question = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'question', 'id' => $qid));
            }

            $question->setName($questionData['name']);
            $question->setDescription($questionData['description']);
            $question->setQuestionType($questionData['questionType']);
            $question->setRequired($questionData['required']);
            $question->setDependencies($questionData['dependencies']);
            $question->setQuestionValues($questionData['questionValues']);
            $question->setCorrectValues($questionData['correctValues']);
            $this->entityManager->persist($question);

            unset($formData['question' . $qid]);
            unset($questionData);
        }


        // Now delete all questions to be removed.
        $deleteQuestions = unserialize($this->request->request->get('delete_questions'));
        if (count($deleteQuestions) > 0) {
            $where = 'tblSurvey.id = \'' . $this->id . '\'';
            $surveyPages = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'page', 'where' => $where));
            if (count($surveyPages > 0)) {
                $page = reset($surveyPages);
                foreach ($deleteQuestions as $qid) {
                    // Don't try to delete qids that were never in the database to begin with
                    if ($qid > $maxQuestionId) {
                        continue;
                    }

                    foreach ($page['questions'] as $k => $question) {
                        if ($question['id'] != $qid) {
                            continue;
                        }
                        $question->delete();
                        break;
                    }
                }
            }
        }

        // Write changes into database
        $this->entityManager->flush();

        // redirect back to the wizard page
        $url = ModUtil::url($this->name, 'admin', 'view');
        return $this->view->redirect($url);
    }
}
