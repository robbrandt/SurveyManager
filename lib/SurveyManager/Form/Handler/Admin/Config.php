<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Configuration handler implementation class.
 */
class SurveyManager_Form_Handler_Admin_Config extends SurveyManager_Form_Handler_Admin_Base_Config
{
    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @param Zikula_Form_View $view The form view instance.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize(Zikula_Form_View $view)
    {
        parent::initialize($view);

        $modVars = $view->get_template_vars('config');

        $modVars['submissionRecipients'] = isset($modVars['submissionRecipients']) && is_array($modVars['submissionRecipients']) ? implode("\r\n", $modVars['submissionRecipients']) : '';
        $modVars['techEmailRecipients'] = isset($modVars['techEmailRecipients']) && is_array($modVars['techEmailRecipients']) ? implode("\r\n", $modVars['techEmailRecipients']) : '';

        $this->view->assign('config', $modVars);

        return true;
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     *
     * @param Zikula_Form_View $view The form view instance.
     * @param array            $args Additional arguments.
     *
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     *
     * @return mixed Redirect or false on errors.
     */
    public function handleCommand(Zikula_Form_View $view, &$args)
    {
        if ($args['commandName'] == 'save') {
            // check if all fields are valid
            if (!$this->view->isValid()) {
                return false;
            }

            // retrieve form data
            $data = $this->view->getValues();

            // start of custom code
            $recipients = str_replace("\r", "\n", $data['config']['submissionRecipients']);
            $recipients = str_replace("\n\n", "\n", $recipients);
            $recipients = explode("\n", $recipients);
            foreach ($recipients as $key => $value) {
                if (empty($value)) {
                    unset($recipients[$key]);
                }
            }
            $data['config']['submissionRecipients'] = $recipients;

            $recipients = str_replace("\r", "\n", $data['config']['techEmailRecipients']);
            $recipients = str_replace("\n\n", "\n", $recipients);
            $recipients = explode("\n", $recipients);
            foreach ($recipients as $key => $value) {
                if (empty($value)) {
                    unset($recipients[$key]);
                }
            }
            $data['config']['techEmailRecipients'] = $recipients;

            $maxPhotoWidth = $data['config']['maxPhotoWidth'];
            $maxPhotoHeight = $data['config']['maxPhotoHeight'];
            $maxThumbWidth = $data['config']['maxThumbWidth'];
            $maxThumbHeight = $data['config']['maxThumbHeight'];
            $oldMaxPhotoWidth = $this->getVar('maxPhotoWidth');
            $oldMaxPhotoHeight = $this->getVar('maxPhotoHeight');
            $oldMaxThumbWidth = $this->getVar('maxThumbWidth');
            $oldMaxThumbHeight = $this->getVar('maxThumbHeight');

            // update all module vars
            if (!$this->setVars($data['config'])) {
                return LogUtil::registerError($this->__('Error! Failed to set configuration variables.'));
            }

            LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

            // start of custom code
            if ($maxPhotoWidth != $oldMaxPhotoWidth
                 || $maxPhotoHeight != $oldMaxPhotoHeight
                 || $maxThumbWidth != $oldMaxThumbWidth
                 || $maxThumbHeight != $oldMaxThumbHeight) {

                $uploadFolder = $this->getVar('fileUploadDirectory', '');
                if ($uploadFolder != '' && file_exists($uploadFolder)) {
                    // select all response data entries which belong to questions with questionType photo
                    $where = 'tblQuestion.questionType = \'photo\'';
                    $data = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'responseData', 'where' => $where));

                    foreach ($data as $responseData) {
                        $thumbnailHelper = new SurveyManager_Util_Thumbnail(ServiceUtil::getManager(), $responseData['responseValue'], $uploadFolder);
                        if ($maxPhotoWidth != $oldMaxPhotoWidth || $maxPhotoHeight != $oldMaxPhotoHeight) {
                            $thumbnailHelper->make('display');
                            $thumbnailHelper->make('thumb');
                        } elseif ($maxThumbWidth != $oldMaxThumbWidth || $maxThumbHeight != $oldMaxThumbHeight) {
                            $thumbnailHelper->make('thumb');
                        }
                    }
                }
            }
            // end of custom code

        } else if ($args['commandName'] == 'cancel') {
            // nothing to do there
        }

        // redirect back to the config page
        $url = ModUtil::url($this->name, 'admin', 'config');
        return $this->view->redirect($url);
    }
}
