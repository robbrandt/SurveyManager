<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Question type class for multiple selections with checkboxes.
 */
class SurveyManager_QuestionType_MultiSelectionChecks extends SurveyManager_AbstractQuestionType
{
    /**
     * Returns the question type code.
     */
    public function getID()
    {
        return 'multi_selection';
    }

    /**
     * Returns the question type name.
     */
    public function getName()
    {
        return $this->__('Multiple selection (check boxes)');
    }

    /**
     * Returns the question type category.
     */
    public function getGroup()
    {
        return $this->__('Selection fields');
    }

    /**
     * Returns the editing ui component(s).
     */
    public function getEditInput($question, $response, $context = '')
    {
        $questionId = $question['id'];
        $output = '';
        $responseValues = explode(', ', $response);
        foreach ($question['questionValues'] as $valueKey => $value) {
            $selection = in_array($value, $responseValues) ? ' checked="checked"' : '';
            $output .= '<input type="checkbox" id="responses_' . $questionId . '_' . DataUtil::formatForDisplay($valueKey) . '" name="responses_' . $questionId . '[' . DataUtil::formatForDisplay($valueKey) . ']" value="1"' . $selection . ' /> ' . DataUtil::formatForDisplay($value) . "<br />\n";
            if ($context == 'block_survey_display') {
                $output .= '<br />';
            }
        }
        return $output;
    }

    /**
     * Performs post-editing tasks.
     */
    public function processPostEdit($question, $inputValue, $oldValue, $additionalOptions = array())
    {
        // the format is response_[qid]_[valuekey]
        //$inputValue = FormUtil::getPassedValue('responses_' . $question['id'], array(), 'POST');
        $inputValue = $this->request->request->get('responses_' . $question['id'], array());
        return $inputValue;
    }

    /**
     * Nice formatting.
     */
    public function formatValue($question, $value)
    {
        $newValue = '';

        $multiSelections = array();
        foreach ($value as $valueKey => $selected) {
            if (!$selected) {
                continue;
            }
            $multiSelections[] = $question['questionValues'][$valueKey];
        }
        $newValue = implode(', ', $multiSelections);

        return $newValue;
    }
}
