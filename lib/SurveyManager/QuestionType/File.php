<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Question type class for file uploads.
 */
class SurveyManager_QuestionType_File extends SurveyManager_AbstractQuestionType
{
    /**
     * Returns the question type code.
     */
    public function getID()
    {
        return 'file';
    }

    /**
     * Returns the question type name.
     */
    public function getName()
    {
        return $this->__('File');
    }

    /**
     * Returns the question type category.
     */
    public function getGroup()
    {
        return $this->__('Uploads');
    }

    /**
     * Returns output for preview pages.
     */
    public function getPreviewOutput($value)
    {
        return $this->getPreviewLink($value);
    }

    /**
     * Internal helper method for building a link for previewing the file.
     * Outsourced into own method so that it can be reused by subclasses
     * even if those override the getPreviewOutput method.
     */
    private function getPreviewLink($value)
    {
        $output = '<a href="' . System::getBaseUrl() . DataUtil::formatForDisplay($value) . '" onclick="window.open(this.href); return false;" onkeypress="window.open(this.href); return false;">' . DataUtil::formatForDisplay(basename($value)) . '</a>';
        return $output;
    }

    /**
     * Returns the editing ui component(s).
     */
    public function getEditInput($question, $response, $context = '')
    {
        $questionId = $question['id'];    
        $output = '<input type="file" id="responses_' . $questionId . '" name="responses_' . $questionId . '" />' . "\n";
        $output .= "<br />\n";
        $output .= $this->__f('Maximum file size: %s kb', array($this->getVar('maxFileSizeKb')));
        if ($response != '') {
            $output .= "<br />\n";
            $output .= $this->__('You uploaded') . ' ' . $this->getPreviewOutput($response);
            if ($context == 'admin_response_edit') {
                $output .= ' (<input type="checkbox" name="delete_files[' . $questionId . ']" id="delete_files_' . $questionId . '" value="1" /> ' . $this->__('Delete') . ')';
            }
            $output .= ".\n";
        }

        if ($context == 'block_survey_display') {
            $output .= '<br />';
        }
        return $output;
    }

    /**
     * Performs post-editing tasks.
     */
    public function processPostEdit($question, $inputValue, $oldValue, $additionalOptions = array())
    {
        // Handles the actual file uploads
        $questionId = $question['id'];
        $result = '';

        //$newFile = FormUtil::getPassedValue('responses_' . $questionId, false, 'FILES');
        $newFile = $this->request->files->get('responses_' . $questionId, false);
        $isError = !is_array($newFile) || $newFile['error'] != UPLOAD_ERR_OK;
        $fileUploaded = is_array($newFile) && !empty($newFile['name']) && $newFile['size'] > 0;

        $thumbnailHelper = null;

        $uploadDirectory = $this->getVar('fileUploadDirectory');
        $uploadCanBeProcessed = ($fileUploaded && !$isError && !empty($uploadDirectory));
        $deleteOldFile = (!empty($oldValue) && $fileUploaded && !$isError && $uploadCanBeProcessed);

        if (isset($additionalOptions['deleteFiles'])) {
            if (isset($additionalOptions['deleteFiles'][$questionId]) && $additionalOptions['deleteFiles'][$questionId]) {
                $deleteOldFile = true;
            }
        }

        // Delete the old file if necessary
        if ($deleteOldFile) {
            $this->removeFile($oldValue);
        } else {
            $result = $oldValue;
        }

        // Upload the new one
        if ($uploadCanBeProcessed) {
            $result = $this->uploadFile($newFile);
        }

        return $result;
    }

    /**
     * Deletes an old upload file.
     */
    protected function removeFile($file)
    {
        $helper = new SurveyManager_Util_Manual($this->serviceManager);

        $killPath = $helper->getDocumentRoot() . $file;
        if (is_file($killPath)) {
            unlink($killPath);
        }
    }

    /**
     * Processes a file upload.
     */
    protected function uploadFile($file)
    {
        $uploadDirectory = $this->getVar('fileUploadDirectory');
        $uploader = new SurveyManager_Util_Upload($this->serviceManager, $uploadDirectory);
        return $uploader->handleUpload($file, true, true);
    }
}
