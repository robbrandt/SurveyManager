<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * Question type class for single selection with radio buttons.
 */
class SurveyManager_QuestionType_SingleSelectionRadio extends SurveyManager_AbstractQuestionType
{
    /**
     * Returns the question type code.
     */
    public function getID()
    {
        return 'single_selection_radio';
    }

    /**
     * Returns the question type name.
     */
    public function getName()
    {
        return $this->__('Single selection (radio buttons)');
    }

    /**
     * Returns the question type category.
     */
    public function getGroup()
    {
        return $this->__('Selection fields');
    }

    /**
     * Returns the editing ui component(s).
     */
    public function getEditInput($question, $response, $context = '')
    {
        $questionId = $question['id'];
        $output = '';
        foreach ($question['questionValues'] as $valueKey => $value) {
            $selection = ($response == $value/*Key*/) ? ' checked="checked"' : '';
            $output .= '<input type="radio" id="responses_' . $questionId . '_' . DataUtil::formatForDisplay($valueKey) . '" name="responses[' . $questionId . ']" value="' . DataUtil::formatForDisplay($value) . '"' . $selection . ' /> ' . DataUtil::formatForDisplay($value) . "<br />\n";
            if ($context == 'block_survey_display') {
                $output .= '<br />';
            }
        }
        return $output;
    }

    /**
     * Checks for broken dependencies.
     */
    public function validateDependencies($question, $requiredValue, $inputValue)
    {
        $result = false;
        foreach ($inputValue as $valueKey => $selected) {
            if ($question['questionValues'][$valueKey] != $requiredValue && $selected) {
                continue;
            }
            $result = true;
            break;
        }

        return $result;
    }

    /**
     * PROBABLY NOT REQUIRED...
     *
     * Checks if a given value is correct.
     * /
    public function validateInput($question, $inputValue)
    {
        $result = parent::validateInput($question, $inputValue);
        if (!$result) {
            return $result;
        }

        // Ensure that we do not have an array with all values equal 0
        $result = false;
        foreach ($inputValue as $value => $selected) {
            if (!$selected) {
                continue;
            }
            $result = true;
            break;
        }

        return $result;
    }*/

    /**
     * Nice formatting.
     */
    public function formatValue($question, $value)
    {
        return $value;
        /*$newValue = $question['questionValues'][$value];
        return $newValue;*/
    }
}
