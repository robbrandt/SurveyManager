<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Generic item list block base class.
 */
class SurveyManager_Block_Base_ItemList extends Zikula_Controller_AbstractBlock
{
    /**
     * Initialise the block.
     */
    public function init()
    {
        SecurityUtil::registerPermissionSchema('SurveyManager:ItemListBlock:', 'Block title::');
    }
    
    /**
     * Get information on the block.
     *
     * @return array The block information
     */
    public function info()
    {
        $requirementMessage = '';
        // check if the module is available at all
        if (!ModUtil::available('SurveyManager')) {
            $requirementMessage .= $this->__('Notice: This block will not be displayed until you activate the SurveyManager module.');
        }
    
        return array('module'          => 'SurveyManager',
                     'text_type'       => $this->__('SurveyManager list view'),
                     'text_type_long'  => $this->__('Display list of SurveyManager objects.'),
                     'allow_multiple'  => true,
                     'form_content'    => false,
                     'form_refresh'    => false,
                     'show_preview'    => true,
                     'admin_tableless' => true,
                     'requirement'     => $requirementMessage);
    }
    
    /**
     * Display the block.
     *
     * @param array $blockinfo the blockinfo structure
     *
     * @return string output of the rendered block
     */
    public function display($blockinfo)
    {
        // only show block content if the user has the required permissions
        if (!SecurityUtil::checkPermission('SurveyManager:ItemListBlock:', "$blockinfo[title]::", ACCESS_OVERVIEW)) {
            return false;
        }
    
        // check if the module is available at all
        if (!ModUtil::available('SurveyManager')) {
            return false;
        }
    
        // get current block content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
        $vars['bid'] = $blockinfo['bid'];
    
        // set default values for all params which are not properly set
        if (!isset($vars['objectType']) || empty($vars['objectType'])) {
            $vars['objectType'] = 'survey';
        }
        if (!isset($vars['sorting']) || empty($vars['sorting'])) {
            $vars['sorting'] = 'default';
        }
        if (!isset($vars['amount']) || !is_numeric($vars['amount'])) {
            $vars['amount'] = 5;
        }
        if (!isset($vars['template'])) {
            $vars['template'] = 'itemlist_' . DataUtil::formatForOS($vars['objectType']) . '_display.tpl';
        }
        if (!isset($vars['customTemplate'])) {
            $vars['customTemplate'] = '';
        }
        if (!isset($vars['filter'])) {
            $vars['filter'] = '';
        }
    
        ModUtil::initOOModule('SurveyManager');
    
        $controllerHelper = new SurveyManager_Util_Controller($this->serviceManager);
    
        $utilArgs = array('name' => 'list');
        if (!isset($vars['objectType']) || !in_array($vars['objectType'], $controllerHelper->getObjectTypes('block', $utilArgs))) {
            $vars['objectType'] = $controllerHelper->getDefaultObjectType('block', $utilArgs);
        }
    
        $objectType = $vars['objectType'];
    
        $entityClass = 'SurveyManager_Entity_' . ucwords($objectType);
        $entityManager = $this->serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository($entityClass);
    
        $this->view->setCaching(Zikula_View::CACHE_ENABLED);
        // set cache id
        $component = 'SurveyManager:' . ucwords($objectType) . ':';
        $instance = '::';
        $accessLevel = ACCESS_READ;
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
        $this->view->setCacheId('view|ot_' . $objectType . '_sort_' . $vars['sorting'] . '_amount_' . $vars['amount'] . '_' . $accessLevel);
    
        $template = $this->getDisplayTemplate($vars);
    
        // if page is cached return cached content
        if ($this->view->is_cached($template)) {
            $blockinfo['content'] = $this->view->fetch($template);
            return BlockUtil::themeBlock($blockinfo);
        }
    
        // create query
        $where = $vars['filter'];
        $orderBy = $this->getSortParam($vars, $repository);
        $qb = $repository->genericBaseQuery($where, $orderBy);
    
        // get objects from database
        $currentPage = 1;
        $resultsPerPage = $vars['amount'];
        list($query, $count) = $repository->getSelectWherePaginatedQuery($qb, $currentPage, $resultsPerPage);
        $entities = $repository->retrieveCollectionResult($query, $orderBy, true);
    
        // assign block vars and fetched data
        $this->view->assign('vars', $vars)
                   ->assign('objectType', $objectType)
                   ->assign('items', $entities)
                   ->assign($repository->getAdditionalTemplateParameters('block'));
    
        // set a block title
        if (empty($blockinfo['title'])) {
            $blockinfo['title'] = $this->__('SurveyManager items');
        }
    
        $blockinfo['content'] = $this->view->fetch($template);;
    
        // return the block to the theme
        return BlockUtil::themeBlock($blockinfo);
    }
    
    /**
     * Returns the template used for output.
     *
     * @param array $vars List of block variables.
     *
     * @return string the template path.
     */
    protected function getDisplayTemplate($vars)
    {
        $templateFile = $vars['template'];
        if ($templateFile == 'custom') {
            $templateFile = $vars['customTemplate'];
        }
    
        $templateForObjectType = str_replace('itemlist_', 'itemlist_' . DataUtil::formatForOS($vars['objectType']) . '_', $templateFile);
    
        $template = '';
        if ($this->view->template_exists('contenttype/' . $templateForObjectType)) {
            $template = 'contenttype/' . $templateForObjectType;
        } elseif ($this->view->template_exists('block/' . $templateForObjectType)) {
            $template = 'block/' . $templateForObjectType;
        } elseif ($this->view->template_exists('contenttype/' . $templateFile)) {
            $template = 'contenttype/' . $templateFile;
        } elseif ($this->view->template_exists('block/' . $templateFile)) {
            $template = 'block/' . $templateFile;
        } else {
            $template = 'block/itemlist.tpl';
        }
    
        return $template;
    }
    
    /**
     * Determines the order by parameter for item selection.
     *
     * @param array               $vars       List of block variables.
     * @param Doctrine_Repository $repository The repository used for data fetching.
     *
     * @return string the sorting clause.
     */
    protected function getSortParam($vars, $repository)
    {
        if ($vars['sorting'] == 'random') {
            return 'RAND()';
        }
    
        $sortParam = '';
        if ($vars['sorting'] == 'newest') {
            $idFields = ModUtil::apiFunc('SurveyManager', 'selection', 'getIdFields', array('ot' => $vars['objectType']));
            if (count($idFields) == 1) {
                $sortParam = $idFields[0] . ' DESC';
            } else {
                foreach ($idFields as $idField) {
                    if (!empty($sortParam)) {
                        $sortParam .= ', ';
                    }
                    $sortParam .= $idField . ' DESC';
                }
            }
        } elseif ($vars['sorting'] == 'default') {
            $sortParam = $repository->getDefaultSortingField() . ' ASC';
        }
    
        return $sortParam;
    }
    
    /**
     * Modify block settings.
     *
     * @param array $blockinfo the blockinfo structure
     *
     * @return string output of the block editing form.
     */
    public function modify($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
    
        // set default values for all params which are not properly set
        if (!isset($vars['objectType']) || empty($vars['objectType'])) {
            $vars['objectType'] = 'survey';
        }
        if (!isset($vars['sorting']) || empty($vars['sorting'])) {
            $vars['sorting'] = 'default';
        }
        if (!isset($vars['amount']) || !is_numeric($vars['amount'])) {
            $vars['amount'] = 5;
        }
        if (!isset($vars['template'])) {
            $vars['template'] = 'itemlist_' . DataUtil::formatForOS($vars['objectType']) . '_display.tpl';
        }
        if (!isset($vars['customTemplate'])) {
            $vars['customTemplate'] = '';
        }
        if (!isset($vars['filter'])) {
            $vars['filter'] = '';
        }
    
        $this->view->setCaching(Zikula_View::CACHE_DISABLED);
    
        // assign the approriate values
        $this->view->assign($vars);
    
        // clear the block cache
        $this->view->clear_cache('block/itemlist_display.tpl');
        $this->view->clear_cache('block/itemlist_' . DataUtil::formatForOS($vars['objectType']) . '_display.tpl');
        $this->view->clear_cache('block/itemlist_display_description.tpl');
        $this->view->clear_cache('block/itemlist_' . DataUtil::formatForOS($vars['objectType']) . '_display_description.tpl');
    
        // Return the output that has been generated by this function
        return $this->view->fetch('block/itemlist_modify.tpl');
    }
    
    /**
     * Update block settings.
     *
     * @param array $blockinfo the blockinfo structure
     *
     * @return array the modified blockinfo structure.
     */
    public function update($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
    
        $vars['objectType'] = $this->request->request->filter('objecttype', 'survey', FILTER_SANITIZE_STRING);
        $vars['sorting'] = $this->request->request->filter('sorting', 'default', FILTER_SANITIZE_STRING);
        $vars['amount'] = (int) $this->request->request->filter('amount', 5, FILTER_VALIDATE_INT);
        $vars['template'] = $this->request->request->get('template', '');
        $vars['customTemplate'] = $this->request->request->get('customtemplate', '');
        $vars['filter'] = $this->request->request->get('filter', '');
    
        $controllerHelper = new SurveyManager_Util_Controller($this->serviceManager);
    
        if (!in_array($vars['objectType'], $controllerHelper->getObjectTypes('block'))) {
            $vars['objectType'] = $controllerHelper->getDefaultObjectType('block');
        }
    
        // write back the new contents
        $blockinfo['content'] = BlockUtil::varsToContent($vars);
    
        // clear the block cache
        $this->view->clear_cache('block/itemlist_display.tpl');
        $this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_display.tpl');
        $this->view->clear_cache('block/itemlist_display_description.tpl');
        $this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_display_description.tpl');
    
        return $blockinfo;
    }
}
