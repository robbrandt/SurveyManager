<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 28 11:39:22 CEST 2012.
 */

/**
 * Featured response block class.
 */
class SurveyManager_Block_FeaturedResponse extends Zikula_Controller_AbstractBlock
{
    /**
     * Initialise the block.
     */
    public function init()
    {
        SecurityUtil::registerPermissionSchema('SurveyManager:FeaturedResponseBlock:', 'Block title::');
    }
    
    /**
     * Get information on the block.
     *
     * @return array The block information
     */
    public function info()
    {
        $requirementMessage = '';
        // check if the module is available at all
        if (!ModUtil::available('SurveyManager')) {
            $requirementMessage .= $this->__('Notice: This block will not be displayed until you activate the SurveyManager module.');
        } elseif (!ModUtil::getVar('SurveyManager', 'useFeaturedResponses', false)) {
            $requirementMessage .= $this->__('Notice: This block will not be displayed until you enabled the featured responses on the SurveyManager configuration page.');
        }
    
        return array('module'          => 'SurveyManager',
                     'text_type'       => $this->__('SurveyManager featured response'),
                     'text_type_long'  => $this->__('Display a featured response.'),
                     'allow_multiple'  => false,
                     'form_content'    => false,
                     'form_refresh'    => false,
                     'show_preview'    => true,
                     'admin_tableless' => true,
                     'requirement'     => $requirementMessage);
    }

    /**
     * Display the block.
     *
     * @param array $blockinfo the blockinfo structure
     *
     * @return string output of the rendered block
     */
    public function display($blockinfo)
    {
        // only show block content if the user has the required permissions
        if (!SecurityUtil::checkPermission('SurveyManager:FeaturedResponseBlock:', "$blockinfo[title]::", ACCESS_OVERVIEW)) {
            return false;
        }
    
        // check if the module is available at all
        if (!ModUtil::available('SurveyManager')) {
            return false;
        }

        if (!ModUtil::getVar('SurveyManager', 'useFeaturedResponses', false)) {
            return false;
        }

        // get current block content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
        $vars['bid'] = $blockinfo['bid'];

        if (empty($vars['id']) || !is_numeric($vars['id'])) {
            return false;
        }

        ModUtil::initOOModule('SurveyManager');

        $objectType = $vars['objectType'] = 'survey';

        $entityManager = $this->serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository('SurveyManager_Entity_' . ucfirst($objectType));

        $this->view->setCaching(Zikula_View::CACHE_ENABLED);
        $this->view->setCacheId('block_' . $blockinfo['bid']);

        $template = $this->getDisplayTemplate($vars);
    
        // if page is cached return cached content
        if ($this->view->is_cached($template)) {
            $blockinfo['content'] = $this->view->fetch($template);
            return BlockUtil::themeBlock($blockinfo);
        }

        $id = $vars['id'];

        $response = ModUtil::apiFunc('SurveyManager', 'selection', 'getEntity', array('ot' => 'response', 'id' => $id));

        $helper = new SurveyManager_Util_Manual($this->serviceManager);
        $response['name_id'] = $helper->findResponseValue($id, 'name_id', $response);
        $response['email_from'] = $helper->findResponseValue($id, 'email_from', $response);

        // get survey pages with questions
        $surveyPages = ModUtil::apiFunc('SurveyManager', 'selection', 'getEntities', array('ot' => 'page', 'where' => 'tblSurvey.id = \'' . $response['survey']['id'] . '\''));
        $questions = array();
        foreach ($surveyPages as $surveyPage) {
            foreach ($surveyPage['questions'] as $question) {
                $questions[$question['id']] = $question;
            }
        }

        foreach ($response['answers'] as $datum) {
            $questions[$datum['question']['id']]['responses'][$id] = $datum['responseValue'];
        }
        
        $viewPreview = new Zikula_View('SurveyManager');
        $viewPreview->setCaching(Zikula_View::CACHE_DISABLED);

        $viewPreview->assign('response', $response)
                    ->assign('questions', $questions);
        $renderedResponse = $viewPreview->fetch('user/previewFeatured.tpl');

        // assign block vars and fetched data
        $this->view->assign('vars', $vars)
                   ->assign('response', $response)
                   ->assign('renderedResponse', $renderedResponse)
                   ->assign($repository->getAdditionalTemplateParameters('block'));

        // set a block title
        if (empty($blockinfo['title'])) {
            $blockinfo['title'] = $this->__('Featured response');
        }

        $output = $this->view->fetch($template);
    
        $blockinfo['content'] = $output;
    
        // return the block to the theme
        return BlockUtil::themeBlock($blockinfo);
    }

    /**
     * Returns the template used for output.
     *
     * @param array $vars List of block variables.
     *
     * @return string the template path.
     */
    protected function getDisplayTemplate($vars)
    {
        $template = 'block/featuredResponse.tpl';
        return $template;
    }

    /**
     * Modify block settings.
     *
     * @param array $blockinfo the blockinfo structure
     *
     * @return string output of the block editing form.
     */
    public function modify($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        $helper = new SurveyManager_Util_Manual($this->serviceManager);

        $surveys = ModUtil::apiFunc('SurveyManager', 'selection', 'getEntities', array('ot' => 'survey'));

        foreach ($surveys as $k => $survey) {
            $sid = $survey['id'];
            foreach ($survey['responses'] as $l => $response) {
                if (!$response['featured']) {
                    unset($surveys[$k]['responses'][$l]);
                }
                $rid = $response['id'];
                $survey['responses'][$l]['name_id'] = $helper->findResponseValue($rid, 'name_id', $response);
                $survey['responses'][$l]['email_from'] = $helper->findResponseValue($rid, 'email_from', $response);
            }
            $surveys[$k] = $survey;
        }

        $this->view->setCaching(Zikula_View::CACHE_DISABLED);
    
        // assign the approriate values
        $this->view->assign('id', $vars['id'])
                   ->assign('surveys', $surveys);

        // Return the output that has been generated by this function
        return $this->view->fetch('block/featuredResponse_modify.tpl');
    }

    /**
     * Update block settings.
     *
     * @param array $blockinfo the blockinfo structure
     *
     * @return array the modified blockinfo structure.
     */
    public function update($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        $vars['id'] = (int) $this->request->request->filter('id', 0, FILTER_VALIDATE_INT);

        // write back the new contents
        $blockinfo['content'] = BlockUtil::varsToContent($vars);
    
        // clear the block cache
        $this->view->clear_all_cache();

        return $blockinfo;
    }
}
