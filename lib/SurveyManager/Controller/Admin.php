<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Tue Aug 21 20:13:14 CEST 2012.
 */

/**
 * This is the Admin controller class providing navigation and interaction functionality.
 */
class SurveyManager_Controller_Admin extends SurveyManager_Controller_Base_Admin
{
    /**
     * This method is the default function handling the admin area called without defining arguments.
     *
     * @param array $args List of arguments.
     *
     * @return mixed Output.
     */
    public function main($args)
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        return $this->redirect(ModUtil::url($this->name, 'admin', 'view'));
    }

    /**
     * Performs tree operations with the hierarchy of surveys, pages and questions.
     *
     * @param array $args List of arguments.
     *
     * @return mixed Output.
     */
    public function treeOp($args)
    {
        $returnUrl = ModUtil::url($this->name, 'admin', 'view');

        // parameter specifying which type of objects we are treating
        $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->query->filter('ot', 'survey', FILTER_SANITIZE_STRING);
        $op = (isset($args['op']) && !empty($args['op'])) ? $args['op'] : $this->request->query->filter('op', '', FILTER_SANITIZE_STRING);
        $id = (isset($args['id']) && !empty($args['id'])) ? intval($args['id']) : intval($this->request->query->filter('id', 0, FILTER_VALIDATE_INT));

        $allowedObjectTypes = array('survey', 'page', 'question');
        $allowedOperations = array('expand', 'collapse', 'moveUp', 'moveDown');
        if (!in_array($objectType, $allowedObjectTypes) || !in_array($op, $allowedOperations) || !$id) {
            LogUtil::registerError(LogUtil::getErrorMsgPermission());
            return $this->redirect($returnUrl);
        }

        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', $id . '::', ACCESS_EDIT), LogUtil::getErrorMsgPermission());

        if ($op == 'expand' || $op == 'collapse') {
            $sessionVarName = 'SM_admin_expanded_' . strtolower($objectType) . 's';
            $expandedEntries = SessionUtil::getVar($sessionVarName, array());
            if ($op == 'expand') {
                $expandedEntries[$id] = true;
            } elseif ($op == 'collapse') {
                unset($expandedEntries[$id]);
            }
            SessionUtil::setVar($sessionVarName, $expandedEntries);
        } elseif ($op == 'moveUp' || $op == 'moveDown') {
            // This algorithm relies on the the fact that all objects have a 'weight' field.
            $elementList = null;
            $elementToBeMoved = $this->selectEntity(array('ot' => $objectType, 'id' => $id));
            if ($objectType == 'survey') {
                $elementList = $this->selectEntities(array('ot' => $objectType));
            } elseif ($objectType == 'page') {
                // get all pages of corresponding survey
                $elementList = $this->selectEntities(array('ot' => $objectType, 'where' => 'tblSurvey.id = \'' . $elementToBeMoved['survey']['id'] . '\''));
            } elseif ($objectType == 'question') {
                // get all questions of corresponding page
                $elementList = $this->selectEntities(array('ot' => $objectType, 'where' => 'tblPage.id = \'' . $elementToBeMoved['page']['id'] . '\''));
            }

            // Here begins the actual algorithm
            $keyedByWeight = $this->sortElementListByWeight($elementList);

            // Find the key of the item we're changing
            $movingKey = '';
            foreach ($keyedByWeight as $weightKey => $listItem) {
                if ($listItem['id'] != $id) {
                    continue;
                }
                $movingKey = $weightKey;
                break;
            }    

            $replacedElementKey = 0;
            if ($op == 'moveUp') {
                // Can't move up beyond 0
                if ($movingKey < 1) {
                    $movingKey = 1;
                }
                $replacedElementKey = $movingKey - 1;
            } elseif ($op == 'moveDown') {
                // Can't move down beyond count-1
                if ($movingKey >= count($keyedByWeight) - 2) {
                    $movingKey = count($keyedByWeight) - 2;
                }
                $replacedElementKey = $movingKey + 1;
            }

            // exchange the two elements
            $replacedElement = $keyedByWeight[$replacedElementKey];
            $keyedByWeight[$replacedElementKey] = $keyedByWeight[$movingKey];
            $keyedByWeight[$movingKey] = $replacedElement;

            // Assign the new weight values to the siblings and write them out
            foreach ($keyedByWeight as $weight => $listItem) {
                $listItem['weight'] = $weight;
                $this->entityManager->persist($listItem);
            }
            $this->entityManager->flush();

            $this->view->clear_all_cache();
        }

        return $this->redirect($returnUrl);
    }

    private function sortElementListByWeight($elementList)
    {
        $keyedByWeight = array();

        // Key the sibling list by weight
        foreach ($elementList as $listItem) {
            $weightKey = $this->getUniqueKey($keyedByWeight, $listItem['weight']);
            $keyedByWeight[$weightKey] = $listItem;
        }

        return $keyedByWeight;
    }

    private function getUniqueKey(&$inArray, $itemWeight)
    {
        if (empty($inArray[$itemWeight])) {
            return $itemWeight;
        }

        $key = '';
        for ($counter = 0; !empty($inArray[$key = $itemWeight . '_' .  $counter]); $counter++);

        return $key;
    }

    /**
     * This method provides a simple wizard for survey creation including page and question management.
     *
     * @param array $args List of arguments.
     *
     * @return mixed Output.
     */
    public function wizard($args)
    {
        $objectType = 'survey';
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());
        
        // create new Form reference
        $view = FormUtil::newForm($this->name, $this);
        
        // build form handler class name
        $handlerClass = $this->name . '_Form_Handler_Admin_Wizard';
        
        // execute form using supplied template and page event handler
        return $view->execute('admin/wizard.tpl', new $handlerClass());
    }

    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     *
     * @param array $args List of arguments.
     *
     * @return mixed Output.
     */
    public function featured($args)
    {
        $objectType = 'response';
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        $up = (isset($args['up']) && !empty($args['up'])) ? $args['up'] : (int) $this->request->query->filter('up', '', FILTER_VALIDATE_INT);
        $down = (isset($args['down']) && !empty($args['down'])) ? $args['down'] : (int) $this->request->query->filter('down', '', FILTER_VALIDATE_INT);
        $sid = (isset($args['sid']) && !empty($args['sid'])) ? $args['sid'] : (int) $this->request->query->filter('sid', 0, FILTER_VALIDATE_INT);

        $surveyHasChanged = false;
        if (!empty($sid) && is_numeric($sid)) {
            SessionUtil::setVar($this->name . '_featured_response_sid', $sid);
            $surveyHasChanged = true;

            if ((!empty($up) && is_numeric($up)) || (!empty($down) && is_numeric($down))) {
                // Move elements up or down
                $toMove = (!empty($up) && is_numeric($up)) ? $up : $down;

                $featuredOrders = $this->getVar('featuredOrders');
                if (!is_array($featuredOrders)) {
                    $featuredOrders = array();
                }

                $featuredOrder = $featuredOrders[$sid];

                if (empty($featuredOrder) || !is_array($featuredOrder)) {
                    $thisResponse = $this->selectEntity(array('ot' => $objectType, 'id' => $toMove));
                    $siblings = $this->selectEntities(array('ot' => $objectType, 'where' => 'tbl.featured = 1 AND tblSurvey.id = \'' . $thisResponse['survey']['id'] . '\''));
                    foreach ($siblings as $sibling) {
                        $featuredOrder[$sibling['id']] = $sibling;
                    }
                }

                $key = array_search($toMove, $featuredOrder);

                if (!empty($up) && is_numeric($up)) {
                    // If the given key not the end element in the array...
                    if ($key > 0) {
                        $swapElement = $featuredOrder[$key-1];
                        $featuredOrder[$key-1] = $featuredOrder[$key];
                        $featuredOrder[$key] = $swapElement;
                    }
                } elseif (!empty($down) && is_numeric($down)) {
                    // If the given key not the end element in the array...
                    if ($key < count($featured_order) - 1) {
                        $swapElement = $featuredOrder[$key+1];
                        $featuredOrder[$key+1] = $featuredOrder[$key];
                        $featuredOrder[$key] = $swapElement;
                    }
                }
                $featuredOrders[$sid] = array_values($featuredOrder);
                $this->setVar('featuredOrders', $featuredOrders);
            }
        }

        if ($surveyHasChanged) {
            $this->view->clear_all_cache();
            return $this->redirect(ModUtil::url($this->name, 'admin', 'featured'));
        }


        $surveys = $this->selectEntities(array('ot' => 'survey'));
        $sid = SessionUtil::getVar($this->name . '_featured_response_sid');

        $where = 'tbl.featured = 1';
        if (!empty($sid) && is_numeric($sid)) {
            $where .= ' AND tblSurvey.id = \'' . $sid . '\'';
        }
        $responses = $this->selectEntities(array('ot' => $objectType, 'where' => $where));

        $featuredOrders = $this->getVar('featuredOrders');
        if (!is_array($featuredOrders)) {
            $featuredOrders = array();
        }

        $orderedResponses = array();
        $orderedResponseIds = array();
        $featuredOrder = isset($featuredOrders[$sid]) ? $featuredOrders[$sid] : array();

        foreach ($featuredOrder as $key => $rid) {
            foreach ($responses as $response) {
                if ($response['id'] != $rid) {
                    continue;
                }
                $orderedResponses[$key] = $response;
                $orderedResponseIds[] = $response['id'];
                break;
            }
        }

        foreach ($responses as $response) {
            if (in_array($response['id'], $orderedResponseIds)) {
                continue;
            }
            $orderedResponses[] = $response;
            $orderedResponseIds[] = $response['id'];
        }

        $this->view->setCaching(Zikula_View::CACHE_DISABLED);

        $this->view->assign('sid', $sid)
                   ->assign('surveys', $surveys)
                   ->assign('responses', $responses)
                   ->assign('orderedResponses', $orderedResponses);

        // return template
        return $this->view->fetch('admin/featured.tpl');
    }

    /**
     * Export csv data.
     *
     * @param array $args List of arguments.
     *
     * @return mixed Output.
     */
    public function exportSurvey($args)
    {
        $objectType = 'survey';
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        $exportType = (isset($args['et']) && !empty($args['et'])) ? $args['et'] : $this->request->query->filter('et', 'normal', FILTER_SANITIZE_STRING);
        if (!in_array($exportType, array('normal', 'email'))) {
            $exportType = 'normal';
        }

        $id = (isset($args['id']) && !empty($args['id'])) ? $args['id'] : $this->request->query->filter('id', 0, FILTER_VALIDATE_INT);
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', $id . '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        $survey = ModUtil::apiFunc($this->name, 'selection', 'getSurveyWithData', array('id' => $id));
        $headerRow = array();
        $exportData = array();

        if ($exportType == 'normal') {
            $headerRow[] = $this->__('Response ID');
            $headerRow[] = $this->__('Timestamp');

            // Construct the data array
            $allQuestions = array();
            foreach ($survey['pages'] as $page) {
                foreach ($page['questions'] as $question) {
                    $qid = $question['id'];
                    $allQuestions[$qid] = $question;
                    $headerRow[] = $question['name'];    
                }
            }

            $responses = $this->selectEntities(array('ot' => 'response', 'where' => 'tblSurvey.id = \'' . $id . '\''));

            $allData = array();

            foreach ($responses as $k => $response) {
                $rid = $response['id'];
                $allData[$rid] = array();

                // Try to find data in the reponse for every question.
                $foundRelevantResponse = false;
                // Fill in blank data if necessary.
                foreach ($allQuestions as $qid => $question) {
                    $responseDataForQuestion = '';
                    foreach ($response['answers'] as $responseData) {
                        if ($responseData['question']['id'] != $qid) {
                            continue;
                        }
                        $responseDataForQuestion = $responseData;
                    }

                    if (is_object($responseDataForQuestion) && !empty($responseDataForQuestion)) {
                        $allData[$rid][$qid] = $responseDataForQuestion['responseValue'];
                        $foundRelevantResponse = true;
                    } else {
                        $allData[$rid][$qid] = '';
                    }
                }

                // If we didn't find a relevant value, this response should not be included in the export.
                if (!$foundRelevantResponse) {
                    unset($responses[$k]);
                    unset($allData[$rid]);
                }
            }

            foreach ($allData as $rid => $questionData) {
                $thisRow = array();
                $thisRow[] = $rid;
                $thisRow[] = date("m/d/Y g:s A", $responses[$rid-1]['responseTimestamp']);

                foreach ($questionData as $qid => $value) {
                    $thisRow[] = stripslashes($value);
                }

                $exportData[] = $thisRow;
            }

        } elseif ($exportType == 'email') {
            // get responses data values for all questions of the email type.
            $data = $this->selectEntities(array('ot' => 'responseData', 'where' => 'tblQuestion.questionType = \'email\''));
            foreach ($data as $datum) {
                $exportData[] = $datum['responseValue'];
            }
        }

        if (empty($exportData)) {
            LogUtil::registerError($this->__('Sorry, there are no records of responses for that survey. Please pick a different survey.'));
            return $this->redirect(ModUtil::url($this->name, 'admin', 'view'));
        }

        $this->view->caching = false;

        $this->view->assign('exportType', $exportType)
                   ->assign('headerRow', $headerRow)
                   ->assign('exportData', $exportData);
        $csvContent = $this->view->fetch('admin/export.tpl');

        $filename = DataUtil::formatForOS(preg_replace("/[^A-Za-z0-9]/", "", $survey['name']));
        
        header("Content-Type: text/csv");
        header("Content-Length: " . strlen($csvContent));
        header("Content-Disposition: attachment; filename={$filename}_" . date("Y-m-d") . ".csv");

        echo $csvContent;
        return true;
    }

    private function selectEntity($selectionArgs)
    {
        return ModUtil::apiFunc($this->name, 'selection', 'getEntity', $selectionArgs);
    }

    private function selectEntities($selectionArgs)
    {
        return ModUtil::apiFunc($this->name, 'selection', 'getEntities', $selectionArgs);
    }
}
