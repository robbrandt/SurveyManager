<?php
/**
 * SurveyManager.
 *
 * @copyright Zikula Development Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SurveyManager
 * @author Zikula Development Team <info@zikula.org>.
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for survey entities.
 *
 * @abstract
 */
abstract class SurveyManager_Entity_Base_Survey extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to.
     */
    protected $_objectType = 'survey';
    
    /**
     * @var SurveyManager_Entity_Validator_Survey The validator for this entity.
     */
    protected $_validator = null;
    
    /**
     * @var boolean Option to bypass validation if needed.
     */
    protected $_bypassValidation = false;
    
    /**
     * @var array List of available item actions.
     */
    protected $_actions = array();
    
    /**
     * @var array The current workflow data of this object.
     */
    protected $__WORKFLOW__ = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(length=20)
     * @var string $workflowState.
     */
    protected $workflowState = 'approved';
    
    /**
     * @Gedmo\Sluggable(slugField="slug", position=1)
     * @ORM\Column(length=255)
     * @var string $name.
     */
    protected $name = '';
    
    /**
     * @ORM\Column(type="text", length=5000)
     * @var text $description.
     */
    protected $description = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @var text $thankYou.
     */
    protected $thankYou = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $thankYouTitle.
     */
    protected $thankYouTitle = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $thankYouAlternativeUrl.
     */
    protected $thankYouAlternativeUrl = '';
    
    /**
     * @ORM\Column(type="bigint")
     * @var integer $weight.
     */
    protected $weight = 0;
    
    /**
     * @ORM\Column(type="smallint")
     * @var integer $maxPerIp.
     */
    protected $maxPerIp = 0;
    
    /**
     * @ORM\Column(type="smallint")
     * @var integer $maxPerUserId.
     */
    protected $maxPerUserId = 0;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $useCaptcha.
     */
    protected $useCaptcha = false;
    
    /**
     * @ORM\Column(type="array")
     * @var array $recipients.
     */
    protected $recipients = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $responseSubject.
     */
    protected $responseSubject = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $confirmationSubject.
     */
    protected $confirmationSubject = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @var text $confirmationBody.
     */
    protected $confirmationBody = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $archived.
     */
    protected $archived = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $template.
     */
    protected $template = false;
    
    /**
     * @ORM\Column(length=100)
     * @var string $addition1.
     */
    protected $addition1 = '';
    
    /**
     * @ORM\Column(length=100)
     * @var string $addition2.
     */
    protected $addition2 = '';
    
    /**
     * @ORM\Column(length=100)
     * @var string $addition3.
     */
    protected $addition3 = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $addition4.
     */
    protected $addition4 = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @var text $addition5.
     */
    protected $addition5 = '';
    
    
    /**
     * @Gedmo\Slug(style="lower", separator="-", unique=true, updatable=true)
     * @ORM\Column(type="string", length=255, unique=true)
     * @var string $slug.
     */
    protected $slug;
    
            /**
             * @ORM\Column(type="integer")
             * @ZK\StandardFields(type="userid", on="create")
             * @var integer $createdUserId.
             */
            protected $createdUserId;
    
            /**
             * @ORM\Column(type="integer")
             * @ZK\StandardFields(type="userid", on="update")
             * @var integer $updatedUserId.
             */
            protected $updatedUserId;
    
            /**
             * @ORM\Column(type="datetime")
             * @Gedmo\Timestampable(on="create")
             * @var datetime $createdDate.
             */
            protected $createdDate;
    
            /**
             * @ORM\Column(type="datetime")
             * @Gedmo\Timestampable(on="update")
             * @var datetime $updatedDate.
             */
            protected $updatedDate;
    
    /**
     * Bidirectional - One survey [survey] has many pages [pages] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="SurveyManager_Entity_Page", mappedBy="survey", cascade={"remove"})
     * @ORM\JoinTable(name="surveyman_surveypages")
     * @ORM\OrderBy({"weight" = "ASC"})
     * @var SurveyManager_Entity_Page[] $pages.
     */
    protected $pages = null;
    
    /**
     * Bidirectional - One survey [survey] has many responses [responses] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="SurveyManager_Entity_Response", mappedBy="survey", cascade={"remove"})
     * @ORM\JoinTable(name="surveyman_surveyresponses")
     * @var SurveyManager_Entity_Response[] $responses.
     */
    protected $responses = null;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->workflowState = 'approved';
        $this->initValidator();
        $this->initWorkflow();
        $this->pages = new ArrayCollection();
        $this->responses = new ArrayCollection();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _validator.
     *
     * @return SurveyManager_Entity_Validator_Survey
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param SurveyManager_Entity_Validator_Survey $_validator.
     *
     * @return void
     */
    public function set_validator(SurveyManager_Entity_Validator_Survey $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Set _bypass validation.
     *
     * @param boolean $_bypassValidation.
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    /**
     * Get __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Set __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__.
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = Array())
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }
    
    /**
     * Get workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Set workflow state.
     *
     * @param string $workflowState.
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($workflowState != $this->workflowState) {
            $this->workflowState = $workflowState;
        }
    }
    
    /**
     * Get name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Set name.
     *
     * @param string $name.
     *
     * @return void
     */
    public function setName($name)
    {
        if ($name != $this->name) {
            $this->name = $name;
        }
    }
    
    /**
     * Get description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Set description.
     *
     * @param text $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($description != $this->description) {
            $this->description = $description;
        }
    }
    
    /**
     * Get thank you.
     *
     * @return text
     */
    public function getThankYou()
    {
        return $this->thankYou;
    }
    
    /**
     * Set thank you.
     *
     * @param text $thankYou.
     *
     * @return void
     */
    public function setThankYou($thankYou)
    {
        if ($thankYou != $this->thankYou) {
            $this->thankYou = $thankYou;
        }
    }
    
    /**
     * Get thank you title.
     *
     * @return string
     */
    public function getThankYouTitle()
    {
        return $this->thankYouTitle;
    }
    
    /**
     * Set thank you title.
     *
     * @param string $thankYouTitle.
     *
     * @return void
     */
    public function setThankYouTitle($thankYouTitle)
    {
        if ($thankYouTitle != $this->thankYouTitle) {
            $this->thankYouTitle = $thankYouTitle;
        }
    }
    
    /**
     * Get thank you alternative url.
     *
     * @return string
     */
    public function getThankYouAlternativeUrl()
    {
        return $this->thankYouAlternativeUrl;
    }
    
    /**
     * Set thank you alternative url.
     *
     * @param string $thankYouAlternativeUrl.
     *
     * @return void
     */
    public function setThankYouAlternativeUrl($thankYouAlternativeUrl)
    {
        if ($thankYouAlternativeUrl != $this->thankYouAlternativeUrl) {
            $this->thankYouAlternativeUrl = $thankYouAlternativeUrl;
        }
    }
    
    /**
     * Get weight.
     *
     * @return bigint
     */
    public function getWeight()
    {
        return $this->weight;
    }
    
    /**
     * Set weight.
     *
     * @param bigint $weight.
     *
     * @return void
     */
    public function setWeight($weight)
    {
        if ($weight != $this->weight) {
            $this->weight = $weight;
        }
    }
    
    /**
     * Get max per ip.
     *
     * @return smallint
     */
    public function getMaxPerIp()
    {
        return $this->maxPerIp;
    }
    
    /**
     * Set max per ip.
     *
     * @param smallint $maxPerIp.
     *
     * @return void
     */
    public function setMaxPerIp($maxPerIp)
    {
        if ($maxPerIp != $this->maxPerIp) {
            $this->maxPerIp = $maxPerIp;
        }
    }
    
    /**
     * Get max per user id.
     *
     * @return smallint
     */
    public function getMaxPerUserId()
    {
        return $this->maxPerUserId;
    }
    
    /**
     * Set max per user id.
     *
     * @param smallint $maxPerUserId.
     *
     * @return void
     */
    public function setMaxPerUserId($maxPerUserId)
    {
        if ($maxPerUserId != $this->maxPerUserId) {
            $this->maxPerUserId = $maxPerUserId;
        }
    }
    
    /**
     * Get use captcha.
     *
     * @return boolean
     */
    public function getUseCaptcha()
    {
        return $this->useCaptcha;
    }
    
    /**
     * Set use captcha.
     *
     * @param boolean $useCaptcha.
     *
     * @return void
     */
    public function setUseCaptcha($useCaptcha)
    {
        if ($useCaptcha !== $this->useCaptcha) {
            $this->useCaptcha = (bool)$useCaptcha;
        }
    }
    
    /**
     * Get recipients.
     *
     * @return array
     */
    public function getRecipients()
    {
        return $this->recipients;
    }
    
    /**
     * Set recipients.
     *
     * @param array $recipients.
     *
     * @return void
     */
    public function setRecipients($recipients)
    {
        if ($recipients != $this->recipients) {
            $this->recipients = $recipients;
        }
    }
    
    /**
     * Get response subject.
     *
     * @return string
     */
    public function getResponseSubject()
    {
        return $this->responseSubject;
    }
    
    /**
     * Set response subject.
     *
     * @param string $responseSubject.
     *
     * @return void
     */
    public function setResponseSubject($responseSubject)
    {
        if ($responseSubject != $this->responseSubject) {
            $this->responseSubject = $responseSubject;
        }
    }
    
    /**
     * Get confirmation subject.
     *
     * @return string
     */
    public function getConfirmationSubject()
    {
        return $this->confirmationSubject;
    }
    
    /**
     * Set confirmation subject.
     *
     * @param string $confirmationSubject.
     *
     * @return void
     */
    public function setConfirmationSubject($confirmationSubject)
    {
        if ($confirmationSubject != $this->confirmationSubject) {
            $this->confirmationSubject = $confirmationSubject;
        }
    }
    
    /**
     * Get confirmation body.
     *
     * @return text
     */
    public function getConfirmationBody()
    {
        return $this->confirmationBody;
    }
    
    /**
     * Set confirmation body.
     *
     * @param text $confirmationBody.
     *
     * @return void
     */
    public function setConfirmationBody($confirmationBody)
    {
        if ($confirmationBody != $this->confirmationBody) {
            $this->confirmationBody = $confirmationBody;
        }
    }
    
    /**
     * Get archived.
     *
     * @return boolean
     */
    public function getArchived()
    {
        return $this->archived;
    }
    
    /**
     * Set archived.
     *
     * @param boolean $archived.
     *
     * @return void
     */
    public function setArchived($archived)
    {
        if ($archived !== $this->archived) {
            $this->archived = (bool)$archived;
        }
    }
    
    /**
     * Get template.
     *
     * @return boolean
     */
    public function getTemplate()
    {
        return $this->template;
    }
    
    /**
     * Set template.
     *
     * @param boolean $template.
     *
     * @return void
     */
    public function setTemplate($template)
    {
        if ($template !== $this->template) {
            $this->template = (bool)$template;
        }
    }
    
    /**
     * Get addition1.
     *
     * @return string
     */
    public function getAddition1()
    {
        return $this->addition1;
    }
    
    /**
     * Set addition1.
     *
     * @param string $addition1.
     *
     * @return void
     */
    public function setAddition1($addition1)
    {
        if ($addition1 != $this->addition1) {
            $this->addition1 = $addition1;
        }
    }
    
    /**
     * Get addition2.
     *
     * @return string
     */
    public function getAddition2()
    {
        return $this->addition2;
    }
    
    /**
     * Set addition2.
     *
     * @param string $addition2.
     *
     * @return void
     */
    public function setAddition2($addition2)
    {
        if ($addition2 != $this->addition2) {
            $this->addition2 = $addition2;
        }
    }
    
    /**
     * Get addition3.
     *
     * @return string
     */
    public function getAddition3()
    {
        return $this->addition3;
    }
    
    /**
     * Set addition3.
     *
     * @param string $addition3.
     *
     * @return void
     */
    public function setAddition3($addition3)
    {
        if ($addition3 != $this->addition3) {
            $this->addition3 = $addition3;
        }
    }
    
    /**
     * Get addition4.
     *
     * @return string
     */
    public function getAddition4()
    {
        return $this->addition4;
    }
    
    /**
     * Set addition4.
     *
     * @param string $addition4.
     *
     * @return void
     */
    public function setAddition4($addition4)
    {
        if ($addition4 != $this->addition4) {
            $this->addition4 = $addition4;
        }
    }
    
    /**
     * Get addition5.
     *
     * @return text
     */
    public function getAddition5()
    {
        return $this->addition5;
    }
    
    /**
     * Set addition5.
     *
     * @param text $addition5.
     *
     * @return void
     */
    public function setAddition5($addition5)
    {
        if ($addition5 != $this->addition5) {
            $this->addition5 = $addition5;
        }
    }
    
    /**
     * Get slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    /**
     * Get created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Get pages.
     *
     * @return SurveyManager_Entity_Page[]
     */
    public function getPages()
    {
        return $this->pages;
    }
    
    /**
     * Set pages.
     *
     * @param SurveyManager_Entity_Page[] $pages.
     *
     * @return void
     */
    public function setPages($pages)
    {
        foreach ($pages as $pageSingle) {
            $this->addPages($pageSingle);
        }
    }
    
    /**
     * Adds an instance of SurveyManager_Entity_Page to the list of pages.
     *
     * @param SurveyManager_Entity_Page $page The instance to be added to the collection.
     *
     * @return void
     */
    public function addPages(SurveyManager_Entity_Page $page)
    {
        $this->pages->add($page);
        $page->setSurvey($this);
    }
    
    /**
     * Removes an instance of SurveyManager_Entity_Page from the list of pages.
     *
     * @param SurveyManager_Entity_Page $page The instance to be removed from the collection.
     *
     * @return void
     */
    public function removePages(SurveyManager_Entity_Page $page)
    {
        $this->pages->removeElement($page);
        $page->setSurvey(null);
    }
    
    /**
     * Get responses.
     *
     * @return SurveyManager_Entity_Response[]
     */
    public function getResponses()
    {
        return $this->responses;
    }
    
    /**
     * Set responses.
     *
     * @param SurveyManager_Entity_Response[] $responses.
     *
     * @return void
     */
    public function setResponses($responses)
    {
        foreach ($responses as $responseSingle) {
            $this->addResponses($responseSingle);
        }
    }
    
    /**
     * Adds an instance of SurveyManager_Entity_Response to the list of responses.
     *
     * @param SurveyManager_Entity_Response $response The instance to be added to the collection.
     *
     * @return void
     */
    public function addResponses(SurveyManager_Entity_Response $response)
    {
        $this->responses->add($response);
        $response->setSurvey($this);
    }
    
    /**
     * Removes an instance of SurveyManager_Entity_Response from the list of responses.
     *
     * @param SurveyManager_Entity_Response $response The instance to be removed from the collection.
     *
     * @return void
     */
    public function removeResponses(SurveyManager_Entity_Response $response)
    {
        $this->responses->removeElement($response);
        $response->setSurvey(null);
    }
    
    
    /**
     * Initialises the validator and return it's instance.
     *
     * @return SurveyManager_Entity_Validator_Survey The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new SurveyManager_Entity_Validator_Survey($this);
    
        return $this->_validator;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record.
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        $workflowHelper = new SurveyManager_Util_Workflow(ServiceUtil::getManager());
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'SurveyManager',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName);
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, array('main', 'view', 'display')) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'SurveyManager');
            if (!$result) {
                $dom = ZLanguage::getModuleDomain('SurveyManager');
                LogUtil::registerError(__('Error! Could not load the associated workflow.', $dom));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('approved');
        $workflowHelper = new SurveyManager_Util_Workflow(ServiceUtil::getManager());
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'SurveyManager',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName);
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     *
     * @throws Zikula_Exception Thrown if a validation error occurs
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return;
        }
    
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('SurveyManager');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'survey', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                $component = 'SurveyManager:Survey:';
                $instance = $this->id . '::';
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'survey', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'survey', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
            }
            
            // more actions for adding new related items
            $authAdmin = SecurityUtil::checkPermission($component, $instance, ACCESS_ADMIN);
            
            $uid = UserUtil::getVar('uid');
            if ($authAdmin || (isset($uid) && isset($this->createdUserId) && $this->createdUserId == $uid)) {
            
                $urlArgs = array('ot' => 'page',
                                 'survey' => $this->id);
                if ($currentFunc == 'view') {
                    $urlArgs['returnTo'] = 'adminViewSurvey';
                } elseif ($currentFunc == 'display') {
                    $urlArgs['returnTo'] = 'adminDisplaySurvey';
                }
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => $urlArgs),
                    'icon' => 'add',
                    'linkTitle' => __('Create page', $dom),
                    'linkText' => __('Create page', $dom)
                );
            
                $urlArgs = array('ot' => 'response',
                                 'survey' => $this->id);
                if ($currentFunc == 'view') {
                    $urlArgs['returnTo'] = 'adminViewSurvey';
                } elseif ($currentFunc == 'display') {
                    $urlArgs['returnTo'] = 'adminDisplaySurvey';
                }
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => $urlArgs),
                    'icon' => 'add',
                    'linkTitle' => __('Create response', $dom),
                    'linkText' => __('Create response', $dom)
                );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'survey', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'survey')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return Array The resulting arguments list.
     */
    public function createUrlArgs()
    {
        $args = array('ot' => $this['_objectType']);
    
        $args['id'] = $this['id'];
    
        if (isset($this['slug'])) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers.
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'surveymanager.ui_hooks.surveys';
    }

    /**
     * Returns an array of all related objects that need to be persited after clone.
     * 
     * @param array $objects The objects are added to this array. Default: array()
     * 
     * @return array of entity objects.
     */
    public function getRelatedObjectsToPersist(&$objects = array()) {
        return array();
     }

    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see SurveyManager_Entity_Survey::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $usesCsvOutput = FormUtil::getPassedValue('usecsvext', false, 'GETPOST', FILTER_SANITIZE_STRING);
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this->formatTextualField('workflowState', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('name', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('description', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('thankYou', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('thankYouTitle', $currentFunc, $usesCsvOutput);
        $this['thankYouAlternativeUrl'] = ((isset($this['thankYouAlternativeUrl']) && !empty($this['thankYouAlternativeUrl'])) ? DataUtil::formatForDisplay($this['thankYouAlternativeUrl']) : '');
        $this['weight'] = (int) ((isset($this['weight']) && !empty($this['weight'])) ? DataUtil::formatForDisplay($this['weight']) : 0);
        $this['maxPerIp'] = (int) ((isset($this['maxPerIp']) && !empty($this['maxPerIp'])) ? DataUtil::formatForDisplay($this['maxPerIp']) : 0);
        $this['maxPerUserId'] = (int) ((isset($this['maxPerUserId']) && !empty($this['maxPerUserId'])) ? DataUtil::formatForDisplay($this['maxPerUserId']) : 0);
        $this['useCaptcha'] = (bool) $this['useCaptcha'];
        if ($currentFunc != 'edit' && $currentFunc != 'wizard' && $currentFunc != 'processPage') {  /** ADDED */
            $this['recipients'] = ((isset($this['recipients']) && is_array($this['recipients'])) ? DataUtil::formatForDisplay($this['recipients']) : array());
        } /** ADDED */
        $this->formatTextualField('responseSubject', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('confirmationSubject', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('confirmationBody', $currentFunc, $usesCsvOutput);
        $this['archived'] = (bool) $this['archived'];
        $this['template'] = (bool) $this['template'];
        $this->formatTextualField('addition1', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('addition2', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('addition3', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('addition4', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('addition5', $currentFunc, $usesCsvOutput);
    
        $this->prepareItemActions();
    
        return true;
    }
    
    /**
     * Formats a given textual field depending on it's actual kind of content.
     *
     * @param string  $fieldName     Name of field to be formatted.
     * @param string  $currentFunc   Name of current controller action.
     * @param string  $usesCsvOutput Whether the output is CSV or not (defaults to false).
     * @param boolean $allowZero     Whether 0 values are allowed or not (defaults to false).
     */
    protected function formatTextualField($fieldName, $currentFunc, $usesCsvOutput = false, $allowZero = false)
    {
        if ($currentFunc == 'edit') {
            // apply no changes when editing the content
            return;
        }
    
        if ($usesCsvOutput == 1) {
            // apply no changes for CSV output
            return;
        }
    
        $string = '';
        if (isset($this[$fieldName])) {
            if (!empty($this[$fieldName]) || ($allowZero && $this[$fieldName] == 0)) {
                $string = $this[$fieldName];
                if ($this->containsHtml($string)) {
                    $string = DataUtil::formatForDisplayHTML($string);
                } else {
                    $string = DataUtil::formatForDisplay($string);
                    $string = nl2br($string);
                }
            }
        }
    
        $this[$fieldName] = $string;
    }
    
    /**
     * Checks whether any html tags are contained in the given string.
     * See http://stackoverflow.com/questions/10778035/how-to-check-if-string-contents-have-any-html-in-it for implementation details.
     *
     * @param $string string The given input string.
     *
     * @return boolean Whether any html tags are found or not.
     */
    protected function containsHtml($string)
    {
        return preg_match("/<[^<]+>/", $string, $m) != 0;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see SurveyManager_Entity_Survey::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see SurveyManager_Entity_Survey::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see SurveyManager_Entity_Survey::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        $workflow = $this['__WORKFLOW__'];
        if ($workflow['id'] > 0) {
            $result = (bool) DBUtil::deleteObjectByID('workflows', $workflow['id']);
            if ($result === false) {
                $dom = ZLanguage::getModuleDomain('SurveyManager');
                return LogUtil::registerError(__('Error! Could not remove stored workflow. Deletion has been aborted.', $dom));
            }
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see SurveyManager_Entity_Survey::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see SurveyManager_Entity_Survey::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see SurveyManager_Entity_Survey::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see SurveyManager_Entity_Survey::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see SurveyManager_Entity_Survey::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
    

    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     */
    public function getTitleFromDisplayPattern()
    {
        $formattedTitle = $this->getName();
    
        return $formattedTitle;
    }

    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString()
    {
        return $this->getId();
    }

    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     * (4) http://www.pantovic.com/article/26/doctrine2-entity-cloning
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // init validator
            $this->initValidator();
    
            // reset Workflow
            $this->resetWorkflow();
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
            
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
